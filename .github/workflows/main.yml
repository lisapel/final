name: test-build-push-deploy
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE: ${{ github.repository }}:${{github.ref_name}}

on:
  push:
    branches:
      - feature*
      - main
  pull_request:
    branches:
      - main
jobs:
  service_test:
    runs-on: ubuntu-latest
    services:
      app:
        image: ${{ needs.build-and-push.output.tags }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
        ports: 
        - 8080:8080
        options: --health-cmd="curl -f http://localhost:8080/" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew integrationTest

  unit_tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin

      - name: Build with Gradle
        run: chmod +x ./gradlew

      - name: Run UnitTests
        run: ./gradlew test 

  integration_tests:
    runs-on: ubuntu-latest
    needs: unit_tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin

      - name: Build with Gradle
        run: chmod +x ./gradlew

      - name: Run integration tests
        run: ./gradlew integrationTest

  checkstyle_tests:
     runs-on: ubuntu-latest
     needs: [unit_tests, integration_tests]
     steps:

       - name: Checkout code
         uses: actions/checkout@v4

       - name: Set up Java
         uses: actions/setup-java@v2
         with:
           java-version: 17
           distribution: temurin

       - name: Build with gradle
         run: chmod +x ./gradlew

       - name: Run Checkstyle
         run: ./gradlew checkstyleMain checkstyleTest

  publish_github_package:
    needs: [unit_tests, integration_tests, checkstyle_tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin

      - name: Build with Gradle
        run: chmod +x ./gradlew

      - name: Build with gradle 8.3
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25
        with:
          arguments: build

      - name: Publish to GitHub Packages
        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
        with:
          arguments: publish
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ secrets.TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push From DockerFile
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{github.ref_name}}

      - name: Build and push from DockerFile Pull Req
        if: github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/lisapel/final:main

  deploy_to_test:
    runs-on: ubuntu-latest
    needs: [ unit_tests, integration_tests, publish_github_package ]
    if: github.ref != 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Deploy to Test Environment
        run: |
          echo "Deploying to test environment..."
          echo "Docker image would be: $IMAGE"

  deploy_to_production:
    runs-on: ubuntu-latest
    needs: [ unit_tests, integration_tests, publish_github_package ]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main')
 
    steps:
      - name: Deploy to Production Environment
        run: |
          echo "Deploying to production environment..."
          echo "Docker image would be: $IMAGE"
